---
# PersistentVolume for Grafana
apiVersion: v1
kind: PersistentVolume
metadata:
  name: grafana-pv
  labels:
    pv-name: grafana-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /k8s-volumes/jasmin/grafana-pv
---
# PersistentVolumeClaim for Grafana
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: ""
  selector:
    matchLabels:
      pv-name: grafana-pv
---
# ConfigMap for Grafana Prometheus Datasource
apiVersion: v1
kind: ConfigMap
metadata:
  name: provisioning-ds-prometheus
data:
  prometheus.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        uid: jasmin-prometheus-ds
        type: prometheus
        access: proxy
        orgId: 1
        url: http://prometheus:9090
        basicAuth: false
        editable: false
        enabled: true
        version: 1
---
# ConfigMap for Grafana Dashboard Provisioning
apiVersion: v1
kind: ConfigMap
metadata:
  name: provisioning-dashboards
data:
  dashboards.yml: |
    apiVersion: 1
    providers:
      - name: 'Jasmin'
        orgId: 1
        disableDeletion: false
        updateIntervalSeconds: 120
        allowUiUpdates: true
        options:
          path: /opt/grafana-dashboards
          foldersFromFilesStructure: true
---
# Deployment for Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      name: grafana
  template:
    metadata:
      labels:
        name: grafana
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 0
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          volumeMounts:
            - name: provisioning-ds-prometheus
              mountPath: /etc/grafana/provisioning/datasources
            - name: provisioning-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
            - name: dashboards
              mountPath: /opt/grafana-dashboards
            - name: grafana-data
              mountPath: /var/lib/grafana
      initContainers:
        - name: grafana-installer
          image: busybox
          command: ["/bin/sh", "-c"]
          args:
            - mkdir -p /tmp-dashboards/Jasmin;
              mkdir -p /tmp-dashboards/RabbitMQ;
              wget -O '/tmp-dashboards/Jasmin/HTTP API.json' 'https://raw.githubusercontent.com/jookies/jasmin/0.10.13/docker/grafana/dashboards/Jasmin/HTTP%20API.json';
              wget -O '/tmp-dashboards/Jasmin/SMPP Clients.json' 'https://raw.githubusercontent.com/jookies/jasmin/0.10.13/docker/grafana/dashboards/Jasmin/SMPP%20Clients.json';
              wget -O '/tmp-dashboards/Jasmin/SMPP Server.json' 'https://raw.githubusercontent.com/jookies/jasmin/0.10.13/docker/grafana/dashboards/Jasmin/SMPP%20Server.json';
              wget -O '/tmp-dashboards/RabbitMQ/Overview.json' 'https://raw.githubusercontent.com/jookies/jasmin/0.10.13/docker/grafana/dashboards/RabbitMQ/Overview.json';
          volumeMounts:
            - name: dashboards
              mountPath: "/tmp-dashboards"
      volumes:
        - name: provisioning-ds-prometheus
          configMap:
            name: provisioning-ds-prometheus
        - name: provisioning-dashboards
          configMap:
            name: provisioning-dashboards
        - name: dashboards
          emptyDir: {}
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-pvc
---
# Service for Grafana
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  type: NodePort
  selector:
    name: grafana
  ports:
    - protocol: TCP
      port: 80
      targetPort: http-grafana
---
# PersistentVolume for Prometheus
apiVersion: v1
kind: PersistentVolume
metadata:
  name: prometheus-pv
  labels:
    pv-name: prometheus-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /k8s-volumes/jasmin/prometheus-pv
---
# PersistentVolumeClaim for Prometheus
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: ""
  selector:
    matchLabels:
      pv-name: prometheus-pv
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promconf
data:
  prometheus.yml: |
    global:
      scrape_interval: 30s
      scrape_timeout: 10s
    scrape_configs:
      - job_name: 'percona-postgresql'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app]
            action: keep
            regex: percona-postgresql
        metrics_path: /metrics
        scheme: http
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
      - job_name: jasmin
        static_configs:
          - targets:
              - 'jasmin-http-api:1401'
      - job_name: rabbitmq
        static_configs:
          - targets:
              - 'rabbitmq-broker:15692'
---
# Deployment for Prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      name: prometheus
  template:
    metadata:
      labels:
        name: prometheus
    spec:
      initContainers:
        - name: file-ownership-fix
          image: busybox
          command: ["/bin/sh", "-c"]
          args:
            - chown 65534:65534 /prometheus
          volumeMounts:
            - name: dataprom
              mountPath: "/prometheus"
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
          ports:
            - containerPort: 9090
              name: prometheus-port
              protocol: TCP
          volumeMounts:
            - name: etcprom
              mountPath: /etc/prometheus
            - name: dataprom
              mountPath: /prometheus
      volumes:
        - name: etcprom
          configMap:
            name: promconf
        - name: dataprom
          persistentVolumeClaim:
            claimName: prometheus-pvc
---
# Service for Prometheus
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  selector:
    name: prometheus
  clusterIP: None